trigger:
- '*'

variables:
  serviceConnection: 'SP'
  sandboxSubscriptionId: '64681aa1-73cc-4155-aa97-caa0e4837412'
  subscriptionId: '64681aa1-73cc-4155-aa97-caa0e4837412'
  environment: 'Sandbox'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: 'ApplyAzurePolicySandbox'
  displayName: 'Apply Azure Policy Sandbox'
  jobs:
  - job: 'ApplyAzurePolicySandbox'
    displayName: 'Apply Azure Policy Sandbox'
    steps:
    - checkout: self
      clean: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export SUB="$(sandboxSubscriptionId)"
          export ENVIRONMENT="$(environment)"

          policies=$(find ./policies -name policy.json -type f)
          assignments=$(find ./assignments/subscriptions/$SUB -type f -name 'assign.*.json')

          for policy in ${policies}; do
            policy_name=$(basename "${policy}" .json)$(echo $ENVIRONMENT | tr '[:upper:]' '[:lower:]')
            az policy definition create --name $policy_name --rules "${policy}" --mode All --display-name "${policy_name} - $ENVIRONMENT" --description "Policy from ${policy}"
          done

          for assignment in ${assignments}; do
            assignment_name=$(basename "${assignment}" .json)_$ENVIRONMENT
            az policy assignment create --name $assignment_name --policy "$(jq -r '.properties.policyDefinitionId' "${assignment}")" --scope "/subscriptions/$SUB" --display-name "$assignment_name"
          done

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az policy state trigger-scan --resource '/subscriptions/$(sandboxSubscriptionId)'

- stage: 'ApplyAzurePolicySubscription'
  displayName: 'Apply Azure Policy Subscription'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - job: 'ApplyAzurePolicySubscription'
    displayName: 'Apply Azure Policy Subscription'
    steps:
    - checkout: self
      clean: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          export SUB="$(subscriptionId)"
          export ENVIRONMENT="Production"

          policies=$(find ./policies -name policy.json -type f)
          assignments=$(find ./assignments/subscriptions/$SUB -type f -name 'assign.*.json')

          for policy in ${policies}; do
            policy_name=$(basename "${policy}" .json)$(echo $ENVIRONMENT | tr '[:upper:]' '[:lower:]')
            az policy definition create --name $policy_name --rules "${policy}" --mode All --display-name "${policy_name} - $ENVIRONMENT" --description "Policy from ${policy}"
          done

          for assignment in ${assignments}; do
            assignment_name=$(basename "${assignment}" .json)_$ENVIRONMENT
            az policy assignment create --name $assignment_name --policy "$(jq -r '.properties.policyDefinitionId' "${assignment}")" --scope "/subscriptions/$SUB" --display-name "$assignment_name"
          done

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az policy state trigger-scan --resource '/subscriptions/$(subscriptionId)'
