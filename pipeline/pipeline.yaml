triggers:
- master

pr:
- '*'

variables:
  policiesDirectory: "$(System.DefaultWorkingDirectory)/policies/"
  assignmentsDirectory: "$(System.DefaultWorkingDirectory)/assignments/subscriptions/"
  serviceConnection: 'SP'
  subscriptionId: '64681aa1-73cc-4155-aa97-caa0e4837412'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: ApplyAzurePolicy
  displayName: 'Apply Azure Policy'
  jobs:
    - job: ApplyAzurePolicy
      displayName: 'Apply Azure Policy'
      steps:
      - checkout: self
        clean: true

      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'bash'
          scriptLocation: 'scriptPath'
          scriptPath: 'pipeline-scripts/sandbox-override.sh'
          env:
            SUB: '64681aa1-73cc-4155-aa97-caa0e4837412'
            policiesDirectory: '$(policiesDirectory)'
            assignmentsDirectory: '$(assignmentsDirectory)'

      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            compliance=$(az policy state list --query "[?complianceState=='NonCompliant']")
            if [ -n "$compliance" ]; then
              echo "Non-compliant resources found. Halting deployment."
              exit 1
            fi

- stage: DeployResources
  displayName: 'Deploy Resources'
  dependsOn: ApplyAzurePolicy
  condition: succeeded()
  jobs:
    - job: DeployResources
      displayName: 'Deploy Resources'
      steps:
      - checkout: self
        clean: true

      - task: AzureCLI@2
        inputs:
          azureSubscription: '$(serviceConnection)'
          scriptType: 'bash'
          scriptLocation: 'inlineScript'
          inlineScript: |
            az deployment group create --resource-group myResourceGroup --template-file azuredeploy.json
