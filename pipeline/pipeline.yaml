trigger:
- '*'

variables:
  policiesDirectory: "$(System.DefaultWorkingDirectory)/policies/"
  assignmentsDirectory: "$(System.DefaultWorkingDirectory)/assignments/subscriptions/"
  serviceConnection: 'SP'
  sandboxSubscriptionId: '64681aa1-73cc-4155-aa97-caa0e4837412'
  subscriptionId: '64681aa1-73cc-4155-aa97-caa0e4837412'

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: 'DeployAzurePolicy'
  displayName: 'Deploy Azure Policy'
  jobs:
  - job: 'DeployPolicy'
    displayName: 'Deploy Policy'
    steps:
    - checkout: self
      clean: true

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          set -ex
          export SUB="$(subscriptionId)"
          export ENVIRONMENT="Sandbox"
          export POLICIES_DIR="$(policiesDirectory)"
          export ASSIGNMENTS_DIR="$(assignmentsDirectory)/$SUB"

          echo "Deploying Policies"
          for policy in $(find ${POLICIES_DIR} -name '*.json' -type f); do
            policy_name=$(basename "${policy}" .json)$(echo $ENVIRONMENT | tr '[:upper:]' '[:lower:]')
            echo "Validating policy: ${policy}"
            if jq -e '.properties' "${policy}" >/dev/null; then
              az policy definition create --name $policy_name --rules "${policy}" --mode All --display-name "${policy_name} - $ENVIRONMENT" --description "Policy from ${policy}"
            else
              echo "Error: Policy file ${policy} does not have a valid 'properties' field."
              exit 1
            fi
          done

          echo "Deploying Subscription Assignments"
          for assignment in $(find ${ASSIGNMENTS_DIR} -type f -name 'assign.*.json'); do
            assignment_name=$(basename "${assignment}" .json)_$ENVIRONMENT
            policy_definition_id=$(jq -r '.properties.policyDefinitionId' "${assignment}")$ENVIRONMENT
            echo "Deploying assignment: ${assignment}"
            az policy assignment create --name $assignment_name --policy "${policy_definition_id}" --scope "/subscriptions/$SUB" --display-name "$assignment_name"
          done

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(serviceConnection)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az policy state trigger-scan --resource '/subscriptions/$(subscriptionId)'
