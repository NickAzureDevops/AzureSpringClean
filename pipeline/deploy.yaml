trigger:
- main

pool:
  vmImage: ubuntu-latest

parameters:
  - name: apply
    displayName: Apply
    type: boolean
    default: false
  - name: destroy
    displayName: Destroy
    type: boolean
    default: false

variables: 
  - name: workingDirectory
    value: "$(System.DefaultWorkingDirectory)/terraform/"
  - name: backendAzureRmKey
    value: 'azure-spring-clean-2025.tfstate'
  - name: backendAzureRmResourceGroupName
    value: 'terraform-tfstate-rg'
  - name: backendAzureRmStorageAccountName
    value: 'terraformstate122024'
  - name: backendAzureRmContainerName
    value: 'tfstate'
  - name: serviceConnection 
    value: 'ServiceConnection'
  - group: secrets

stages:
- stage: validate
  displayName: 'Validate'
  jobs:
    - job: Validate
      steps:
      - checkout: self
        clean: true

      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTaskV4@4
        displayName: 'terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(workingDirectory)'
          backendServiceArm: '$(serviceConnection)'
          backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
          backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
          backendAzureRmContainerName: '$(backendAzureRmContainerName)'
          backendAzureRmKey: '$(backendAzureRmKey)'

      - task: TerraformTaskV4@4
        displayName: 'terraform validate'
        inputs:
          provider: 'azurerm'
          command: 'validate'
          workingDirectory: '$(workingDirectory)'
        env:
          ARM_USE_AZUREAD: true
      
      - task: TerraformTaskV4@4
        displayName: 'terraform plan'
        condition: or(and(succeeded(), eq('${{ parameters.apply }}', 'true')), and(succeeded(), eq('${{ parameters.apply }}', 'false'), eq('${{ parameters.destroy }}', 'false')))
        inputs:
          provider: 'azurerm'
          command: 'plan'
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: "${{ variables.serviceConnection }}"
          commandOptions: '-var "admin_password=$(admin_password)"'

- stage: deploy
  displayName: 'Deploy'
  dependsOn:
  - validate
  condition: eq('${{ parameters.apply }}', 'true')
  jobs:
    - job: 'Deploy'
      steps:
      - checkout: self
        clean: true
      
      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTaskV4@4
        displayName: 'terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(workingDirectory)'
          backendServiceArm: '$(serviceConnection)'
          backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
          backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
          backendAzureRmContainerName: '$(backendAzureRmContainerName)'
          backendAzureRmKey: '$(backendAzureRmKey)'

      - task: TerraformTaskV4@4
        displayName: 'terraform apply'
        condition: eq('${{ parameters.apply }}', 'true')
        inputs:
          provider: 'azurerm'
          command: 'apply'
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'
          commandOptions: '-var "admin_password=$(admin_password)"'

- stage: destroy
  displayName: 'Destroy'
  dependsOn:
  - validate
  condition: eq('${{ parameters.destroy }}', 'true')
  jobs:
    - job: 'Destroy'
      steps:
      - checkout: self
        clean: true

      - task: TerraformInstaller@1
        displayName: 'Install Terraform'
        inputs:
          terraformVersion: 'latest'

      - task: TerraformTaskV4@4
        displayName: 'terraform init'
        inputs:
          provider: 'azurerm'
          command: 'init'
          workingDirectory: '$(workingDirectory)'
          backendServiceArm: '$(serviceConnection)'
          backendAzureRmResourceGroupName: '$(backendAzureRmResourceGroupName)'
          backendAzureRmStorageAccountName: '$(backendAzureRmStorageAccountName)'
          backendAzureRmContainerName: '$(backendAzureRmContainerName)'
          backendAzureRmKey: '$(backendAzureRmKey)'

      - task: TerraformTaskV4@4
        displayName: 'terraform destroy'
        condition: eq('${{ parameters.destroy }}', 'true')
        inputs:
          provider: 'azurerm'
          command: 'destroy'
          workingDirectory: "${{ variables.workingDirectory }}"
          environmentServiceNameAzureRM: '${{ variables.serviceConnection }}'